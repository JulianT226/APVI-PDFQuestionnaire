from datetime import datetime
from pypdf import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import io
import saudi_cust_data


def create_overlay(data, page_number):
    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)

    if page_number == 0:
        can.setFont("Helvetica", 7)
        can.drawString(444, 619, data['consular'])
        can.setFont("Helvetica", 10)
        can.drawString(178, 122, data['full_name'])
        can.drawString(103, 67, current_date)
    elif page_number == 1:
        can.drawString(115, 635, data['first_name'])

        can.setFont("Helvetica", 8)
        can.drawString(270, 635, data['middle_name'])

        can.setFont("Helvetica", 10)
        can.drawString(369, 635, data['last_name'])
        can.drawString(134, 618, data['mother_name'])
        can.drawString(122, 603, data['dob'])
        can.drawString(385, 603, data['birth_place'])
        can.drawString(156, 587, data['prev_nationality'])
        can.drawString(407, 588, data['present_nationality'])
        can.drawString(125, 571, data['pass_issue_place'])
        can.drawString(378, 571, data['pass_num'])
        can.drawString(135, 556, data['pass_exp'])
        can.drawString(378, 556, data['pass_iss'])
        can.drawString(107, 517, data['religion'])
        can.drawString(113, 502, data['profession'])
        can.drawString(376, 502, data['qualification'])
        can.drawString(221, 487, data['full_address'])
        can.drawString(55, 472, data['phone_num'])
        can.drawString(135, 457, data['email'])
        can.drawString(55, 430, data['full_bus_address'])
        can.drawString(320, 430, data['bus_phone_num'])
        can.drawString(55, 302, data['inviting_name_address'])
        can.drawString(209, 261, data['arrival_date'])
        can.drawString(370, 261, data['airline'])
        can.drawString(486, 261, data['flight_num'])
        can.drawString(161, 245, data['departing_city'])
        can.drawString(451, 245, data['arriving_city'])
        can.drawString(216, 230, data['stay_duration'])
        can.drawString(88, 66, data['full_name'])
        can.drawString(485, 66, current_date)

        can.setFont("Helvetica-Bold", 12)
        if data['sex'] == 'FEMALE':
            can.drawString(110, 531, 'X')
        elif data['sex'] == 'MALE':
            can.drawString(157, 531, 'X')

        if data['marital_status'] == 'MARRIED':
            can.drawString(365, 530, 'X')
        elif data['marital_status'] == 'SINGLE':
            can.drawString(412, 531, 'X')

        if data['visa_type'] == "EMPLOYMENT":
            can.drawString(105, 398, 'X')
        elif data['visa_type'] == "RESIDENCE":
            can.drawString(159, 398, 'X')
        elif data['visa_type'] == "STUDENT":
            can.drawString(217, 398, 'X')
        elif data['visa_type'] == "UMRAH":
            can.drawString(281, 398, 'X')
        elif data['visa_type'] == "HAJJ":
            can.drawString(346, 399, 'X')
        elif data['visa_type'] == "DIPLOMAT":
            can.drawString(413, 399, 'X')
        elif data['visa_type'] == "SPECIAL":
            can.drawString(478, 398, 'X')
        elif data['visa_type'] == "PERSONNEL":
            can.drawString(541, 398, 'X')
        elif data['visa_type'] == "REENTRY":
            can.drawString(157, 370, 'X')
        elif data['visa_type'] == "TOURISM":
            can.drawString(218, 375, 'X')
        elif data['visa_type'] == "COMMERCE":
            can.drawString(281, 375, 'X')
        elif data['visa_type'] == "BUSINESSMEN":
            can.drawString(346, 376, 'X')
        elif data['visa_type'] == "GOVERNMENT":
            can.drawString(413, 376, 'X')
        elif data['visa_type'] == "WORK VISIT":
            can.drawString(477, 375, 'X')
        elif data['visa_type'] == "FAMILY VISIT":
            can.drawString(541, 375, 'X')
        elif data['visa_type'] == "OTHERS":
            can.drawString(478, 352, 'X')
        elif data['visa_type'] == "COMPANION":
            can.drawString(542, 352, 'X')

    can.save()
    packet.seek(0)
    return packet


def fill_pdf(input_pdf_path, output_pdf_path, data):
    existing_pdf = PdfReader(open(input_pdf_path, "rb"))
    output = PdfWriter()

    for i in range(len(existing_pdf.pages)):
        page = existing_pdf.pages[i]
        overlay = PdfReader(create_overlay(data, i))
        if i == 0 or i == 1:  # Only overlay the first and second pages for simplicity
            page.merge_page(overlay.pages[0])
        output.add_page(page)

    with open(output_pdf_path, "wb") as output_stream:
        output.write(output_stream)


cust_name_full = saudi_cust_data.first_name + " " + saudi_cust_data.middle_name + " " + saudi_cust_data.last_name
cust_address_full = saudi_cust_data.address_street + ", " + saudi_cust_data.address_city + ", " + saudi_cust_data.address_state
cust_bus_address_full = saudi_cust_data.bus_address_street + ", " + saudi_cust_data.bus_address_city + ", " + saudi_cust_data.bus_address_state
inviting_name_address = saudi_cust_data.inviting_name + ", " + saudi_cust_data.inviting_address
current_date = datetime.today().strftime('%m/%d/%Y')


data = {
    'consular': saudi_cust_data.consular,
    'full_name': cust_name_full,
    'first_name': saudi_cust_data.first_name,
    'middle_name': saudi_cust_data.middle_name,
    'last_name': saudi_cust_data.last_name,
    'mother_name': saudi_cust_data.mother_name,
    'dob': saudi_cust_data.dob,
    'birth_place': saudi_cust_data.birth_place,
    'prev_nationality': saudi_cust_data.prev_nationality,
    'present_nationality': saudi_cust_data.present_nationality,
    'pass_issue_place': saudi_cust_data.pass_issue_place,
    'pass_num': saudi_cust_data.pass_num,
    'pass_exp': saudi_cust_data.pass_exp,
    'pass_iss': saudi_cust_data.pass_iss,
    'sex': saudi_cust_data.sex,
    'marital_status': saudi_cust_data.marital_status,
    'religion': saudi_cust_data.religion,
    'profession': saudi_cust_data.profession,
    'qualification': saudi_cust_data.qualification,
    'address_street': saudi_cust_data.address_street,
    'address_city': saudi_cust_data.address_city,
    'address_state': saudi_cust_data.address_state,
    'full_address': cust_address_full,
    'passport_number': saudi_cust_data.pass_num,
    'phone_num': saudi_cust_data.phone_num,
    'email': saudi_cust_data.email,
    'bus_address_street': saudi_cust_data.bus_address_street,
    'bus_address_city': saudi_cust_data.bus_address_city,
    'bus_address_state': saudi_cust_data.bus_address_state,
    'full_bus_address': cust_bus_address_full,
    'bus_phone_num': saudi_cust_data.bus_phone_num,
    'visa_type': saudi_cust_data.visa_type,
    'inviting_name_address': inviting_name_address,
    'arrival_date': saudi_cust_data.arrival_date,
    'airline': saudi_cust_data.airline,
    'flight_num': saudi_cust_data.flight_num,
    'departing_city': saudi_cust_data.departing_city,
    'arriving_city': saudi_cust_data.arriving_city,
    'stay_duration': saudi_cust_data.stay_duration,
}


output_pdf_path = r"C:\Users\julia\PycharmProjects\APVI_PreCheck-PyPDF2\saudi_visa\saudi_visa_filled-{}.pdf".format(data['last_name'].replace(' ', '_'))

fill_pdf(r"C:\Users\julia\PycharmProjects\APVI_PreCheck-PyPDF2\saudi_visa\saudi_visa_form.pdf", output_pdf_path, data)